import React, {HTMLAttributes, PureComponent, MouseEvent} from 'react';
import PropTypes from 'prop-types';
import withPlatform from '../../hoc/withPlatform';
import FixedLayout from '../FixedLayout/FixedLayout';
import Touch, {TouchEvent} from '../Touch/Touch';
import classNames from '../../lib/classNames';
import {HasPlatform} from '../../types';
import getClassname from '../../helpers/getClassName';
import {canUseDOM} from '../../lib/dom';
import {transitionEvent} from '../../lib/supportEvents';
import {ANDROID} from '../../lib/platform';
import {rubber} from '../../lib/touch';

export interface SnackbarProps extends HTMLAttributes <HTMLElement>, HasPlatform {
  / **
   * Action button name in notification
   * /
  action ?: string | React.ComponentType;

  / **
   * Will be called when you click on the action button
   * /
  onActionClick ?: (e: React.MouseEvent) => void;

  / **
   * 24x24 pixel color icon
   * /
  before ?: React.ReactNode;
  / **
   * Content on the right side, may be `<Avatar size = {32} />`
   * /
  after ?: React.ReactNode;
  / **
   * Button location options
   * /
  layout ?: 'vertical' | 'horizontal';
  / **
   * Time in milliseconds after which the plate will hide
   * /
  duration ?: number;
  / **
   * Notification close handler
   * /
  onClose: () => void;
}

export interface SnackbarState {
  closing: boolean;
  touched: boolean;
}

class Snackbar extends PureComponent <SnackbarProps, SnackbarState> {
  constructor (props: SnackbarProps) {
    super (props);

    this.state = {
      closing: false,
      touched: false,
    };

    this.bodyElRef = React.createRef ();

    this.shiftXPercent = 0;
    this.shiftXCurrent = 0;
  }

  static defaultProps = {
    duration: 4000,
  };

  static contextTypes = {
    window: PropTypes.any,
    document: PropTypes.any,
  };

  private innerEl: HTMLDivElement;
  private readonly bodyElRef: React.RefObject <HTMLDivElement>;

  private shiftXPercent: number;
  private shiftXCurrent: number;
  private touchStartTime: Date;
  private animationFrame: number;

  private closeTimeout: ReturnType <typeof setTimeout>;
  private transitionFinishTimeout: ReturnType <typeof setTimeout>;

  componentDidMount () {
    this.setCloseTimeout ();
  }

  componentWillUnmount () {
    this.clearCloseTimeout ();
  }

  get window () {
    return this.context.window || window;
  }

  setCloseTimeout = () => {
    if (canUseDOM) {
      this.closeTimeout = setTimeout (() => {
        this.close ();
      }, this.props.duration);
    }
  };

  clearCloseTimeout = () => {
    clearTimeout (this.closeTimeout);
  };

  private readonly onActionClick = (e: MouseEvent) => {
    this.close ();

    if (this.props.action && typeof this.props.onActionClick === 'function') {
      this.props.onActionClick (e);
    }
  };

  close () {
    this.setState ({closing: true});
    this.waitTransitionFinish (this.innerEl, () => {
      this.props.onClose ();
    });
  }

  waitTransitionFinish (element: HTMLElement, eventHandler: VoidFunction) {
    if (element) {
      if (transitionEvent.supported) {
        element.removeEventListener (transitionEvent.name, eventHandler);
        element.addEventListener (transitionEvent.name, eventHandler);
      } else {
        clearTimeout (this.transitionFinishTimeout);
        this.transitionFinishTimeout = setTimeout (eventHandler, this.props.platform === ANDROID? 400: 320);
      }
    }
  }

  getInnerRef = (el: HTMLDivElement) => this.innerEl = el;

  onTouchStart = () => {
    this.clearCloseTimeout ();
  };

  onTouchMoveX = (event: TouchEvent) => {
    const {shiftX, startT, originalEvent} = event;
    originalEvent.preventDefault ();

    if (! this.state.touched) {
      this.setState ({touched: true});
    }

    this.shiftXPercent = shiftX / this.window.innerWidth * 100;
    this.shiftXCurrent = rubber (this.shiftXPercent, 72, 1.2, this.props.platform === ANDROID);
    this.touchStartTime = startT;

    this.setBodyTransform (this.shiftXCurrent);
  };

  onTouchEnd = () => {
    const newState = {
      touched: false,
    };

    let callback;

    if (this.state.touched) {
      let shiftXReal = this.shiftXCurrent;
      const expectTranslateY = shiftXReal / (Date.now () - this.touchStartTime.getTime ()) * 240 * 0.6 * (this.shiftXPercent <0? -1: 1);
      shiftXReal = shiftXReal + expectTranslateY;

      if (shiftXReal> = 50) {
        this.clearCloseTimeout ();
        this.waitTransitionFinish (this.bodyElRef.current, () => {
          this.props.onClose ();
        });
        this.setBodyTransform (120);
      } else {
        callback = () => {
          this.setCloseTimeout ();
          this.setBodyTransform (0);
        };
      }
    } else {
      this.setCloseTimeout ();
    }

    this.setState (newState, callback);
  };

  setBodyTransform (percent: number) {
    cancelAnimationFrame (this.animationFrame);
    this.animationFrame = requestAnimationFrame (() => {
      this.bodyElRef.current.style.transform = `translate3d ($ {percent
